Tests d'Initialisation (Initialization) :

- Vérifie l'initialisation avec la bonne adresse de token :
    - L'adresse du token est correctement enregistrée
    - La liste des joueurs est vide au départ
    - L'état initial est "Waiting"
    - L'index du tour actuel est à 0

- Teste la double initialisation :
    - La deuxième tentative d'initialisation doit échouer
    - Vérifie le message d'erreur "Already initialized"

- Vérifie le propriétaire :
    - Le propriétaire est correctement défini lors du déploiement


Tests de Gestion du Lobby :

- Teste l'ajout de joueurs :
    - Vérifie qu'un joueur peut rejoindre le lobby
    - Vérifie que la liste des joueurs est mise à jour
    - Vérifie qu'un joueur ne peut pas rejoindre deux fois

- Teste la sortie de joueurs :
    - Vérifie qu'un joueur peut quitter le lobby
    - Vérifie le remboursement de la mise
    - Vérifie la mise à jour de la liste des joueurs


Tests de Gestion des Mises (Stake Management) :

- Vérifie le dépôt des mises :
    - Prépare l'environnement :
        1. Un joueur rejoint le lobby
        2. Le joueur approuve le transfert de tokens
        3. Dépose une mise valide
    - Vérifie :
        - L'émission de l'événement StakeDeposited avec les bons paramètres
        - Le montant correct est enregistré dans le mapping stakes

- Vérifie le suivi des mises multiples :
    - Test avec deux joueurs :
        1. Les deux joueurs rejoignent le lobby
        2. Chaque joueur fait une mise différente (100 et 200 tokens)
    - Vérifie :
        - Les mises sont correctement suivies individuellement
        - Le mapping stakes reflète les montants exacts pour chaque joueur

- Vérifie les restrictions d'état :
    - Teste après la fin du jeu :
        1. Configure une partie avec deux joueurs
        2. Termine la partie via emergencyWithdraw
        3. Tente un dépôt de mise
    - Vérifie :
        - Le rejet avec le message "Game is not active"
        - L'impossibilité de déposer après la fin

- Vérifie les transferts de tokens :
    - Suit les balances :
        1. Enregistre la balance initiale du joueur
        2. Effectue le dépôt de mise
        3. Vérifie :
            - La diminution correcte de la balance du joueur
            - L'augmentation correspondante de la balance du contrat

- Vérifie les limites de mises :
    - Teste la limite MAX_STAKE :
        1. Tente de déposer plus que la limite
        2. Vérifie le rejet avec "Stake exceeds maximum limit"
        3. S'assure que la mise n'est pas enregistrée


Tests de Gestion des Tours (Turn Management) :

- Vérifie le suivi du tour courant :
    - Configure une partie avec 3 joueurs
    - Vérifie que le premier tour est attribué au bon joueur
    - S'assure que l'index de tour est correctement initialisé

- Vérifie l'avancement des tours :
    - Un joueur soumet un coup valide
    - Vérifie que le tour passe au joueur suivant
    - Confirme que l'index est mis à jour

- Empêche les coups hors tour :
    - Tente de faire jouer un joueur hors de son tour
    - Vérifie que la transaction est rejetée
    - Contrôle le message d'erreur "Not your turn"

- Vérifie le cycle des joueurs :
    - Configure une partie avec 3 joueurs
    - Fait jouer chaque joueur à son tour
    - Vérifie que le cycle revient au premier joueur
    - S'assure que l'ordre est maintenu


Tests de Challenge et Révélation :

- Teste la révélation des coups :
    1. Un joueur soumet un coup
    2. Le coup est challengé
    3. Le joueur révèle son coup
    4. Vérifie :
        - La validité du hash
        - La mise à jour du compteur de rounds perdus
        - La réinitialisation des données du coup


Tests du Système de Pénalités :

- Vérifie l'accumulation des défaites :
    1. Faire perdre plusieurs rounds à un joueur
    2. Vérifier que le compteur augmente correctement
    3. Vérifier l'élimination après 3 défaites


Tests des Fonctions d'Urgence :

- Teste le retrait d'urgence :
    - Vérifie que seul le propriétaire peut l'exécuter
    - Vérifie le remboursement des mises
    - Vérifie la fin du jeu


Tests de Démarrage du Jeu (Game Start) :

- Vérifie les conditions minimales de démarrage :
    - Empêche le démarrage avec moins de 2 joueurs
    - Vérifie le message d'erreur "Not enough players to start"

- Teste le démarrage réussi :
    - Ajoute le nombre minimum de joueurs (2)
    - Vérifie que le démarrage déclenche l'événement GameStarted
    - S'assure que le jeu démarre sans erreur

- Vérifie l'état du jeu au démarrage :
    - Contrôle que l'état passe à "InGame" (état 1)
    - Vérifie la transition depuis l'état "Waiting"

- Teste la génération de référence de jeu :
    - Vérifie que la référence est un bytes32 non nul
    - S'assure que la référence est unique pour chaque partie

- Empêche le double démarrage :
    - Démarre une première fois le jeu
    - Vérifie que le second démarrage échoue
    - Contrôle le message d'erreur "Game already started"


Tests de Distribution des Récompenses (Reward Distribution) :

1. Calcul correct du gagnant :
    - Configure une partie avec 3 joueurs et des mises de 100 tokens chacun
    - Enregistre la balance initiale du joueur 1
    - Simule un scénario où :
        * Player 1 fait un coup valide
        * Player 2 challenge et perd (mauvais challenge)
        * Player 2 fait un coup invalide
        * Player 3 challenge et gagne (Player 2 ment)
    - Vérifie que le gagnant (Player 1) reçoit :
        * Balance initiale - mise + pot total (300 tokens)

2. Distribution du pot total :
    - Configure une partie avec 2 joueurs (100 tokens chacun)
    - Crée une situation où Player 1 ment et perd
    - Vérifie que Player 2 reçoit le pot total (200 tokens)
    - S'assure que la balance finale est supérieure à la mise initiale

3. Gestion des égalités :
    - Configure une partie avec 2 joueurs
    - Crée une situation d'égalité où :
        * Player 1 ment et perd
        * Player 2 ment et perd
    - Vérifie que Player 1 gagne (premier joueur gagne en cas d'égalité)
    - Confirme que sa balance finale est supérieure à sa mise

4. Fin de partie après distribution :
    - Configure une partie standard avec 2 joueurs
    - Distribue les récompenses
    - Vérifie que l'état du jeu passe à "Ended" (état 2)


Tests des Fonctions d'Urgence (Emergency Functions) :

1. Retrait d'urgence par le propriétaire :
    - Vérifie que seul le propriétaire peut déclencher le retrait
    - Confirme l'émission de l'événement EmergencyWithdrawal

2. Restriction du retrait d'urgence :
    - Vérifie qu'un non-propriétaire ne peut pas déclencher le retrait
    - Confirme le rejet avec l'erreur OwnableUnauthorizedAccount

3. Réinitialisation des mises :
    - Configure une partie avec 2 joueurs et leurs mises
    - Déclenche le retrait d'urgence
    - Vérifie que toutes les mises sont remises à 0

4. Fin de partie sur urgence :
    - Démarre une partie avec 2 joueurs
    - Déclenche le retrait d'urgence
    - Vérifie que l'état passe à "Ended" (état 2)


Tests de Distribution des Cartes (Card Distribution) :

Initialisation du deck : 

1. "should initialize deck with correct card distribution"

  1. Configure une partie avec 4 joueurs
  2. Donne des tokens aux joueurs pour les mises
  3. Enregistre les clés secrètes des joueurs
  4. Distribue les mains et collecte toutes les cartes
  5. Vérifie les quantités exactes :
     * 6 As (type 1)
     * 6 Rois (type 2)
     * 6 Reines (type 3)
     * 2 Jokers (type 4)
     * Aucune carte de type 0

2. "should distribute all 20 cards with 4 players"

  1. Configure une partie avec exactement 4 joueurs
  2. Distribue les mains à tous les joueurs
  3. Compte le total des cartes distribuées
  4. Vérifie qu'il y a exactement 20 cartes au total


Sécurité de la Distribution : 

1. "should require player registration before hand distribution"

  1. Configure une partie
  2. Tente de demander une main sans enregistrement
  3. Vérifie l'erreur "Player key not registered"

2. "should prevent hand requests with invalid secret"

  1. Enregistre un joueur avec un secret correct
  2. Tente d'accéder avec un mauvais secret
  3. Vérifie l'erreur "Invalid secret"

3. "should prevent double hand requests"

  1. Enregistre et distribue une première main
  2. Tente une seconde distribution
  3. Vérifie l'erreur "Hand already requested"

Transitions de phase : 

"should transition to Gameplay phase after all hands distributed"

  1. Configure une partie avec 2 joueurs
  2. Premier joueur demande sa main
  3. Vérifie phase Distribution (0)
  4. Second joueur demande sa main
  5. Vérifie émission de l'événement RoundPhaseAdvanced(1)

Confidentialité des mains : 
"should maintain hand privacy between players"

  1. Configure une partie avec 2 joueurs
  2. Joueur 1 reçoit sa main
  3. Joueur 2 tente de voir la main du Joueur 1
  4. Vérifie que la tentative est rejetée

  